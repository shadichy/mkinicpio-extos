#!/usr/bin/sh

live_profile() {
	driver=${driver:-prop}
	lang=${lang:-en_US}
	keytable=${keytable:-us}
	tz=${tz:-"Etc/UTC"}
}

_call_err() {
	echo "ERROR: $1"
	echo "   Falling back to interactive prompt"
	echo "   You can try to fix the problem manually, log out when you are finished"
	launch_interactive_shell
}

_mount_dev() {
	local dev="$1" \
		mnt="$2" \
		fs="-t ${3:-auto}" \
		opts="${4:-defaults}"

	mkdir -p "$mnt"

	msg ":: Mounting '$dev' to '$mnt'"
	[ "${dev%%'/dev/'*}" ] || while ! poll_device "${dev}" 30; do
		_call_err "'$dev' device did not show up after 30 seconds..."
	done

	[ -d "$dev" ] && fs="--bind"
	[ -b "$dev" ] || opts="loop,$opts"

	[ "${mnt}" ] || mkdir -p "${mnt}"

	timeout 10 mount -o ${opts} ${fs} "${dev}" "${mnt}" ||
		_call_err "Failed to mount '${dev}' on '${mnt}'! Wrong fs type or corrupted device!"
	return $?
}

extos_mount_handler() {
	local remount_limit=0
	while [ ! "${ROOT:=$root}" ] && [ "$remount_limit" -le 5 ]; do
		remount_limit=$((remount_limit + 1))
		device_list=$(ls /sys/class/block/ | grep ".*[0-9]$" | grep -Ev "loop|ram|nbd|fd" | sed "s|^|/dev/|g")
		for part in $device_list; do
			sleep 1
			msg "Looking for: $part"
			local disktmp="$(mktemp)"
			rm -f "$disktmp"
			mkdir -p "$disktmp"
			timeout 10 mount -t auto "$part" "$disktmp"
			[ -d "$disktmp/systems" ] &&
				[ -d "$disktmp/packages" ] &&
				[ -e "$disktmp/instances/$INSTANCE" ] &&
				ROOT=$part && break
			umount -lf "$disktmp"
		done
	done

	[ "$ROOT" ] || _call_err "No ROOT device found!"
	ROOT=$(resolve_device "$ROOT" || echo "$ROOT")

	local devfs=/run/extos/devfs \
		data=/run/extos/data \
		system="/run/extos/system" \
		pkgs=/run/extos/packages

	_mount_dev "$ROOT" "$devfs" "$ROOTFSTYPE" "${rwopt:=ro},${ROOTFLAGS}"

	# Mode
	[ "${MODE:=normal}" = normal ] && [ "$rwopt" = ro ] && MODE=readonly
	lowers="$system"
	if [ "${MODE:=normal}" = normal ]; then
		upper="$data/overlay"
		workdir="$data/workdir"
	else
		local overlay=/run/extos/overlay
		timeout 10 mount -t tmpfs tmpfs $overlay
		mkdir -p "$overlay/upper"
		mkdir -p "$overlay/work"
		upper="$overlay/upper"
		workdir="$overlay/work"
		case "$MODE" in
		readonly)
			INSTANCEFLAGS="ro,${INSTANCEFLAGS:-defaults}"
			lowers="$data/overlay:$lowers"
			;;
		esac
	fi

	_mount_dev "$devfs/instances/${INSTANCE:=default}" "$data" "$INSTANCEFSTYPE" "${INSTANCEFLAGS}"
	. $data/.conf

	_mount_dev "$devfs/systems/${ROOT_IMG:=default}" "$system" "$ROOT_IMG_FS" "${ROOT_IMG_FLAGS}"

	while read -r fs; do
		case $fs in "#"*) continue ;; esac
		eval $(echo "$fs" | awk '{print "local PKG="$1" PKG_ID="$2" PKG_FS="$3" PKG_OPTS="$4 }')
		_mount_dev "$devfs/packages/$PKG" "$pkgs/$PKG_ID" "$PKG_FS" "$PKG_OPTS"
	done <$data/.pkg_fstab

	mount -t overlay overlay -o lowerdir=${lowers},upperdir=${upper},workdir=${workdir} "$1"

	# Bind
	([ -d "$1/cdrom" ] || mkdir "$1/cdrom") && mount --bind "$devfs" "$1/cdrom"

}

run_hook() {
	for mod in dm_mod dm-raid raid0 raid1 raid456 loop; do
		modprobe $mod || true
	done
	if [ -f /ventoy/hook/arch/ventoy-disk.sh ]; then
		echo "Loading Ventoy hooks"
		sh /ventoy/hook/arch/ventoy-disk.sh || true
		sleep 0.3
	fi
	export mount_handler="extos_mount_handler"
}
